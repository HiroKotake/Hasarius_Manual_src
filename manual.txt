#h2 id="id_start" はじめに
#p
WEBページ制作の実際の現場ではHTMLコード、CSS、スクリプト、イメージといった作業単位の分業になっているケースが多いかと思う。HTMLコーダの作業効率の向上を図るため、入力内容の省力化、過去資産の再利用といったHTMLには存在しない機能を実装するため、Hasariusを開発した。
HasariusのコンセプトはMarkDown言語と似ていると思われる方もいるかもしれないが、HasariusはMakrDown言語の亜種ではない。MarkDown言語はwhitespaceを基本とした制限された表現でのHTMLへの変換を目的で作成された言語であり、現在は一部表現力を付けているとはいえ、完全にHTMLを保管するような機能は設定されていない。
Hasariusはそれとは異なりHTMLの基本構成、素のHTMLの表現力を引き継ぎつつ、より構造化されたファイル構成を持ち、HTMLに慣れたユーザであれば、より少ない文字数でHTMLの作成を支援する機能の提供を目的とした中間言語である。
##
#p
また、昨今のHTMLではブロック構造を基本としてHTMLを定義するが、Hasariusは基本的に行単位で文書の解析を実施しHTML化を果たしている、もちろん複数に渡って影響を及ぼすブロック定義も可能である。
ブロックに関しては、HTMLの場合タグに応じた閉じタグが必要となるがHasariusでは"##"を持ってい代替を行うため、より少ない文字入力で完結することができる。これはメリットとデメリットを生じさせる。メリットは少ない文字入力で済むというものであり、HTML記述者はブロックが何でスタートしているかを意識することなくブロックを閉じることが出来る。しかし、反面、"##"が何により起因しているのか判断することが一見しては難しいというデメリットを生むことになる。Hasariusでは省入力の場合のメリットを重視し”##”でブロックを閉じるということを採用している。
##
#h2 id="id_install" インストール
#p
##
#h2 id="id_exec" 実行コマンド
#p
HasariusはPHPにより記述されている。そのため実行にはPHP7.x以降が必要となる。
サーバからHasariusをダウンロードした後で、任意のディレクトリにHasariusを配置する。
##
#p
例えば、”/usr/local/bin”に配置した場合は実行するための呼び出しは次のようになる。
##
#pre class="sample_view"
php /usr/local/bin/Hasarius/hasarius.php ...
##
#p
実態としてphpで作成されているので、シェルスクリプトに登録しても良いし、linux系で使用するならばpathを通して、実行権をhasarius.phpにつけて直接呼び出しても構わない。
##
#p
Hasariusの実行時引数としては以下のものがある。
##
#pre class="sample_view"
    src=<ソースファイル>
    dist=&lt;HTML生成先ディレクトリ&gt;
    title=<ページタイトル>
    \@<変数名>="変数値"
##
#p
distとtitleについては後述するmakeファイルに定義することも出来るので、そちらで定義しているのならば指定の必要はない。
srcは必須な引数となる。変換元となる文書を示す文字列(ディスク上のパス)を設定しなければならない。
##
#h2 id="id_write_basic" 元となる文書の記述
#p
次に、Hasariusを用いてHTMLファイルを作成する場合に必要な、ソース記述ルールについて述べたいと思う。
##
#p
Hasariusの基本的なソース文書の作成であるが、基本的にHTMLを作るという事を意識せず、まず、通常の文章を打つのと同じように文書を作成し、文書の作成が完了したら、Hasariusで定義しているタグを対象の文章に追加する。追加が完了したらhasarius.phpを実行して対象の文書をHTML化する。
##
#p
HTMLに慣れている制作者であれば、文書作成と同時にHasariusのタグを埋め込んでいくことももちろん可能である。
Hasariusには別の文書ファイルを読み込む機能があるので、複数の制作者が分業して一つのHTMLを作成するということも出来る。
現状のバージョンでは定数定義にしか利用出来ないが、変数を用いて用語の統一といった複数人で作成する時に必要となる機能も準備しているので、別文書読み込み機能と合わせて柔軟に対応することも可能である。
##
#p
現在主流のWEBページはブロック構造を基本とした構成を取ることが多いかと思う。Hasariusを使用してソース文書を作成する場合に推奨するのは、ブロック構造のみ定義したソースファイルを作成し、後述する”@include”を用いて実際に表示する内容を定義したファイルを各ブロックに追加するという方法である。
この形式であれば、複数人でのコードの分業やページ間で共通に表示しなければならないような内容を別ファイルとして設定し再利用することが可能となり作業効率性に寄与出来うる。
##
#h3 id="id_write_tag_text" タグとテキスト
#p
Hasariusでは行頭にタグを設定する（以降、行頭に設定するタグは行頭タグと呼ぶ）。必要な機能を持ったHasariusタグを行頭に追加するだけで、設定された行がHTMLに置き換えられる。
標準で提供されている利用可能な行頭タグについては後述する"定義済み行頭タグ"を参照。
##
#pre class="sample_view"
    ex.1:　基本的なHasariusタグの記述
    \#h1 大見出し
##
#p
行頭タグであることを示すためタグの前に”#”を設定することに注目してもらいたい。
行頭に”#”が設定されている場合、Hasarius内部ではその行は変換対象として文書が解析される。
また、HTMLと同様にHasariusタグには属性があり、対象となる文字列をHTML変換後必要となる属性を定義することが出来るようになっている。
##
#p
ex.1の文字列にCSSで定義されているクラスを当てたいという場合には、次のように記載すればよい。
##
#pre class="sample_view"
    ex.2:　属性を追加したHasariusタグの記述
    \#h1 class=“top_heder” 大見出し
##
#p
基本的に対象となるテキストの前に属性を設定すればよい。複数の属性を設定する場合は、半角スペースをつけて次に必要な属性を設定する。
##
#p
ここまでの内容は一行でHTMLが完結するようなケースについて述べてきたが、複数に渡って影響を発生させるようなタグについて述べたい。
HasariusではHTMLのような開始タグと終了タグが対となっているわけではない。終了タグは全て”##”として設定している。
また、HTMLと異なるり終了タグである”##”は独立した行として記述する必要がある。HTMLの場合は文に続けて終了タグを書くことが可能であるが、Hasariusではそのような記述は認めていない。あくまで”##”が独立した一行でなければならない（後述するコメント文は除く）。
##
#pre class="sample_view"
    ex.3: 複数に影響を及ぼすHasariusタグの記述
    \#p class=“message”
    これはサンプルで使用するメッセージボックスです。
    あくまでもサンプルですので、意味のある内容ではありません。
    \##
##
#p
もちろん、複数行に渡って影響を及ぼすタグは入れ子にすることも可能である。
##
#pre class="sample_view"
    ex.4: 入れ子にしたタグの例
    \#div class=“baseBox”
    \#div class=“leftBox”
    左のブロックです。
    \##
    \#div class=“rightBox”
    右のブロックです。
    \##
    \##
##

#h3 id="id_write_inner_tag" 文字列中にタグを設定する場合
#p
HTMLと同様に文章中に文字装飾その他のためにタグを設定することが出来る。
文字列中にタグを設定したい場合は、対象となる文字列の直前に"\@"を追加し、直後に適用させるタグを指定し、半角スペースの後に対象となる文字列を記述する。その後、閉じるために"\@"を追加する。
標準で提供されている利用可能な文中タグについては後述する"定義済み文中タグ"を参照。
##
#pre class="sample_view"
    ex.5: 文中タグの例
    この文は\@b サンプル\@です。
##
#p
また、行頭タグと同様に属性を設定することが可能である。属性を設定する場合には次のようにすればよい。
##
#pre class="sample_view"
    ex.6: 属性を含む文中タグの例
    この文は\@b style="color:red" サンプル\@です。
##
#p
行頭タグ・文中タグに関わらず属性は"<属性名>=<属性値>"の=(半角イコール)で接続されたペアとして定義されている。それ以外については表示対象文字列をして取り扱われる。
##
#p
Hasariusでは行頭に"#"を用いてタグを設定する場合と、文中で"@"で囲いタグを設定する２種類のタグの適用方法があるが、行頭タグと文中タグでは設定出来るタグが異なっていることに注意が必要である。行頭タグの場合は単行もしくは複数行に渡って影響を及ぼすようなタグが提供されている。文中タグについては文字列のみについては、例えば文字を修飾するようなタグが設定されている。
##
#h3 id="id_write_validate" タグのチェック機能について
#p
全てのタグに設定されている属性は変換中に記述内容について正当性の確認が行われる。確認にて不当な属性値が設定されている場合には、その時点で解析が終了し、画面上にエラーを表示する。
##
#h3 id="id_write_linebreak" 改行について
#p
Hasariusでは、基本的にタグを含まない文字列のみが記載されている行はテキスト中で改行している場合のそのままHTMLでも改行するものとして扱われる。そのため改行タグを明示的に設定する必要はない。
これはHTML変換後に自動的に文字列後に&lt;br&gt;タグが設定されるということを示す。
しかしながら、&lt;br&gt;タグが自動的に設定されては困るとい場合には、HTMLと同様にpreタグを使用することで回避することが可能である。
##
#h3 id="id_write_variable" 変数について
#p
Hasariusでは変数定義が可能である。とはいっても現在のバージョンには変数を使って処理を変更するといった機能は実装されていないため、もっぱら定数定義の用途としてしか使用できない。
##
#pre class="sample_view"
    ex.7: 定数定義
    \@var org teleios

    <文中での変数の設定>
    この文書は\#org\#が版権を持っています。二次利用をご検討の方は\#org\#にご連絡をお願いします。

    -> HTML変換後
    この文書はteleiosが版権を持っています。二次利用をご検討の方はteleiosまでご連絡をお願います。
##
#p
“@var”を行頭に設定し、次に変数名、最後に変数値を各々半角スペースで区切って変数定義を行う。
定義した変数を文中に設定したい場合は、対象となる箇所に”$<変数名>$”を配置する。
HTML変換を実施する時に対象となっている変数名の箇所が変数値に置き換わる。
##
#h3 id="id_write_include" 別ファイルの読み込み
#p
大規模な文書を作成したり、ページ間で共通の内容を表示しなければならないような場合に、毎回同じ内容を同一文書内で繰り返し記載しなければならないのはナンセンスである。
そこで、Hasariusでは別に作成した文書ファイルの内容を文書内に潜り込ませることが可能となっている。
特定の位置に文書ファイルの内容を挿入したい場合には次のように記載すれば良い。
##
#pre class="sample_view"
    ex.8: 文書ファイルの挿入
    \@include ./common.txt
##
#p
“\@include”コマンドに引き続き、読み込ませたいファイルを設定することで対象のファイルの内容が”\@include”で指定した行に置き換わって追加される。
##
#h3 id="id_write_comment" コメント文
#p
文書中に作業用のコメントを残したい場合があるかと思う。そこで他の言語と同様にHasariuでもコメント文の設定が出来る。
Hasariusでは”//<半角スペース>”から改行までがコメントとして扱われる。文中で”//“を使用したい場合には”\”エスケープすることができるので”\/\/“とすればコメントとしては扱わなくなる。
##
#p
なお、他の言語ではブロックコメントが提供されているがHasariusではブロックコメント機能は提供していないので、コメントを記載するときは各行に”//<半角スペース>“を設定する必要がある。
##
#h3 id="id_write_make_file" makeファイルについて
#p
HasariusではHTMLページのHead部へ記載する内容や、HTML生成に必要な情報をmake.jsonとして定義する必要がある。また、HTML変換を実施するときにHTMLのバージョンの選択、コメントの取り扱い、属性エラーの確認時の対処、ページタイトル、HTML変換後のファイルの格納場所やファイル名といった設定もmakeファイルに記載しておく必要がある。
##
#div class="box_explain"
@include ./make_file.txt
##
